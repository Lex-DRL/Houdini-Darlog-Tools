# encoding: utf-8
"""
Python code for `mobileVAT` rop node.
"""

__author__ = 'Lex Darlog (DRL)'

try:
	import typing as _t
except ImportError:
	pass

import hou

from json import dump
from os import listdir, rmdir
from os.path import abspath, dirname
from shutil import copyfile

from darlog_hou.filesystem import empty_dir
from darlog_hou.selection import keep_selection


def clear_tmp_dir(asset_node):  # type: (hou.RopNode) -> None
	"""Remove EVERYTHING within a temp directory dedicated to this asset type."""
	asset_tmp_dir = asset_node.evalParm("./PARAMS/assetType_tmpDir")
	empty_dir(asset_tmp_dir)


@keep_selection
def copy_labs_vat_node(asset_node):  # type: (hou.RopNode) -> None
	"""
	Fucking juniors are working in Labs!
	They made the node in such a way that it CANNOT be rendered when it's embedded into some other asset... like this one.

	So, to do as simple thing as rendering with it, we need to copy it into an unlocked subnetwork prior tom that.
	"""
	template_node = asset_node.node("./LabsVAT_template_container/ropnet/LabsVAT")  # type: hou.RopNode
	tmp_container_node = asset_node.node("./UNLOCKED_TMP_container/ropnet")  # type: hou.RopNode

	for leftover_child in tmp_container_node.children():
		leftover_child.destroy()

	template_node.copyTo(tmp_container_node)


def copy_out_fbx(asset_node):  # type: (hou.RopNode) -> None
	"""After all the processing is finished, copy the FBX generated by Labs' asset from tmp into final-output path."""
	src_fbx = asset_node.evalParm("./PARAMS/path_tmpGeo")  # type: str
	if not src_fbx:
		raise ValueError("{}\nINTERNAL ERROR: empty filepath for temporary FBX".format(repr(asset_node)))
	out_fbx = asset_node.evalParm("./PARAMS/path_outGeo")  # type: str
	if not out_fbx:
		raise ValueError("{}\nNo file path for output FBX".format(repr(asset_node)))
	copyfile(src_fbx, out_fbx)


def _vector_parm_val(asset_node, path_pattern, components):  # type: (hou.RopNode, str, str) -> _t.Tuple[float, ...]
	return tuple(
		asset_node.evalParm(path_pattern.format(x))
		for x in components.split()
	)


def export_json_config(asset_node):  # type: (hou.RopNode) -> None
	json_path = asset_node.evalParm("./PARAMS/path_outConfigJSON")  # type: str
	pos_min = _vector_parm_val(asset_node, "./sopnet/OUT_UnitySpace/posMin{}", "x y z")
	pos_size = _vector_parm_val(asset_node, "./sopnet/OUT_UnitySpace/posSize{}", "x y z")
	data = dict(
		pos_unpack=dict(
			min=pos_min,
			size=pos_size
		)
	)
	with open(json_path, 'w') as f:
		try:
			dump(data, f, indent='\t')
		except Exception:
			dump(data, f, indent=2)


def post_cleanup(asset_node):  # type: (hou.RopNode) -> None
	"""Remove temporary files from disk."""
	tmp_instance_dir = asset_node.evalParm("./PARAMS/instance_tmpDir")
	if not tmp_instance_dir:
		raise ValueError("{}\nINTERNAL ERROR: empty filepath for temp-folder".format(repr(asset_node)))
	empty_dir(tmp_instance_dir)
	rmdir(tmp_instance_dir)

	tmp_scene_dir = abspath(dirname(tmp_instance_dir))
	if not tmp_scene_dir:
		raise ValueError("{}\nINTERNAL ERROR: empty filepath for temp scene-folder".format(repr(asset_node)))
	if not listdir(tmp_scene_dir):
		rmdir(tmp_scene_dir)
